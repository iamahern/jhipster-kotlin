<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.domain

<%_
let hasDto = dtoMapstruct;
let hasTextBlob = false;
let hasRelationship = relationships.length !== 0;
_%>
<%_
    for (const field of fields.filter(field => !field.transient)) {
        if (databaseTypePostgres && field.blobContentTypeText) {
            hasTextBlob = true;
            break;
        }
    }
_%>
<%_ if (databaseTypeCassandra) { _%>
import org.springframework.data.annotation.Id
    <%_ if (fieldsContainBlob) { _%>
import org.springframework.data.cassandra.core.mapping.Column
    <%_ } _%>
import org.springframework.data.cassandra.core.mapping.Table
<%_ } _%>
<%_ if (relationshipsContainOtherSideIgnore) { _%>
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
<%_ } _%>
<%_ if (!hasDto && typeof javadoc != 'undefined') { _%>
import io.swagger.annotations.ApiModel
<%_ } _%>
<%_ if (!hasDto && importApiModelProperty) { _%>
import io.swagger.annotations.ApiModelProperty
<%_ } _%>
<%_ if (enableHibernateCache) { _%>
import org.hibernate.annotations.Cache
import org.hibernate.annotations.CacheConcurrencyStrategy
<%_ } _%>
<%_ if (!reactive && (hasTextBlob|| (fieldsContainUUID && (databaseTypeMysql || databaseTypeMariadb)))) { _%>
import org.hibernate.annotations.Type
<%_ } _%>
<%_ if (databaseTypeMongodb) {
    if (!embedded) { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.mongodb.core.mapping.Document
    <%_ } _%>
import org.springframework.data.mongodb.core.mapping.Field
    <%_ if (hasRelationship) { _%>
import org.springframework.data.mongodb.core.mapping.DBRef
    <%_ } _%>
<%_ } else if (databaseTypeCouchbase) {
    if (!embedded) { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.couchbase.core.mapping.Document
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue
import org.springframework.data.couchbase.core.mapping.id.IdPrefix
    <%_ } _%>
import com.couchbase.client.java.repository.annotation.Field
    <%_ if (hasRelationship) { _%>
import org.springframework.data.couchbase.core.query.FetchType
import org.springframework.data.couchbase.core.query.N1qlJoin
    <%_ } _%>
<%_ } else if (databaseTypeNeo4j) { _%>
import org.springframework.data.neo4j.core.schema.GeneratedValue;
import org.springframework.data.neo4j.core.schema.Id;
import org.springframework.data.neo4j.core.schema.Node;
import org.springframework.data.neo4j.core.schema.Property;
import org.springframework.data.neo4j.core.support.UUIDStringGenerator;
<%_ if (hasRelationship) { _%>
import org.springframework.data.neo4j.core.schema.Relationship
<%_ } _%>
<%_ } if (databaseTypeSql) { _%>
    <%_ if (reactive) { _%>
import org.springframework.data.annotation.Id
import org.springframework.data.annotation.Transient
import org.springframework.data.relational.core.mapping.Column
import org.springframework.data.relational.core.mapping.Table
import org.springframework.data.annotation.PersistenceConstructor
    <%_ } else { _%>
import javax.persistence.*
    <%_ } _%>
<%_ } if (validation) { _%>
import javax.validation.constraints.*
<%_ } _%>

<%_ if (searchEngineElasticsearch) { _%>
import org.springframework.data.elasticsearch.annotations.FieldType
<%_ } _%>
import java.io.Serializable
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal
<%_ } if (fieldsContainBlob && databaseTypeCassandra) { _%>
import java.nio.ByteBuffer
<%_ } if (fieldsContainInstant) { _%>
import java.time.Instant
<%_ } if (fieldsContainLocalDate) { _%>
import java.time.LocalDate
<%_ } if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime
<%_ } if (fieldsContainDuration) { _%>
import java.time.Duration
<%_ } _%>
<%_ if (fieldsContainUUID) { _%>
import java.util.UUID
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= packageName %>.domain.enumeration.<%= element %>
<%_ }); _%>

<%_ if (databaseTypeCouchbase && !embedded) { _%>
import <%= packageName %>.config.ID_DELIMITER
import org.springframework.data.couchbase.core.mapping.id.GenerationStrategy.UNIQUE

<%_ } _%>
<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= persistClass %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
    <%_ if (!hasDto) { _%>
@ApiModel(description = "<%- formatAsApiDescription(javadoc) %>")
    <%_ }_%>
<%_ } _%>
<%_ if (databaseTypeSql) { _%>
    <%_ if (reactive) { _%>
@Table("<%= entityTableName %>")
    <%_ } else { _%>
@Entity
@Table(name = "<%= entityTableName %>")
        <%_ if (enableHibernateCache) { _%>
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
<%_ if (!embedded) { _%>
    <%_ if (databaseTypeMongodb) { _%>
@Document(collection = "<%= entityTableName %>")
    <%_ } else if (databaseTypeNeo4j) { _%>
    @Node
    <%_ } else if (databaseTypeCouchbase) { _%>
@Document
    <%_ } else if (databaseTypeCassandra) { _%>
@Table("<%= entityInstance %>")
    <%_ } _%>
<%_ } _%>
<%_ if (searchEngineElasticsearch) { _%>
@org.springframework.data.elasticsearch.annotations.Document(indexName = "<%= entityInstance.toLowerCase() %>")
    <%_ } _%>
data class <%= persistClass %>(
    <%_ if (!embedded) { _%>
    @Id
        <%_ if (databaseTypeSql && isUsingMapsId === false && !reactive && !primaryKey.composite) { _%>
            <%_ if (primaryKey.fields[0].jpaGeneratedValue === 'identity') { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
            <%_ } else if (primaryKey.fields[0].jpaGeneratedValue === 'sequence') { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
            <%_ } else if (primaryKey.fields[0].jpaGeneratedValue) { _%>
    @GeneratedValue
            <%_ } _%>
        <%_ } else if (databaseTypeCouchbase && !embedded) { _%>
    @GeneratedValue(strategy = UNIQUE, delimiter = ID_DELIMITER)
        <%_ } else if (databaseTypeNeo4j) { _%>
    @GeneratedValue(UUIDStringGenerator::class)
        <%_ } _%>
    var <%= primaryKey.name %>: <%= primaryKey.type %>? = null,
    <%_ } _%>
<%_
// TODO temporary calculation update this later.
const relationshipLength = relationships.filter(r => {
    const oside = r.ownerSide || false;
    return !(embedded && !r.otherEntityIsEmbedded && oside === false);
}).length - 1;

const filteredFields = fields.filter(field => !field.id && !field.transient);
let idx = 0;
for (const field of filteredFields) {
    idx++;
    if (typeof field.javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(field.javadoc) %>
    <%_ }
    let required = false;
    let unique = false;
    const fieldValidate = field.fieldValidate;
    const fieldValidateRules = field.fieldValidateRules;
    const fieldValidateRulesMaxlength = field.fieldValidateRulesMaxlength;
    const fieldType = field.fieldType;
    const fieldTypeBlobContent = field.fieldTypeBlobContent;
    const fieldName = field.fieldName;
    const fieldNameUnderscored = field.fieldNameUnderscored;
    const fieldNameAsDatabaseColumn = field.fieldNameAsDatabaseColumn;
    const comma = (idx === (filteredFields.length - 1) && relationshipLength < 0 ) ?  '' : ',';
    if (fieldValidate) {
        if (fieldValidateRules.includes('required')) {
            required = true;
        }
        if (fieldValidateRules.includes('unique')) {
            unique = true;
        } _%>
    <%- include('../common/field_validators', {field, reactive}); -%>
    <%_ } _%>
    <%_ if (!hasDto && typeof field.javadoc != 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(field.javadoc) %>"<% if (required) { %>, required = true<% } %>)
    <%_ } _%>
    <%_ if (databaseTypeSql && reactive) { _%>
        @Column("<%- fieldNameAsDatabaseColumn %>")
    <%_ } _%>
    <%_ if (databaseTypeSql && !reactive) {
            if (field.fieldIsEnum) { _%>
    @Enumerated(EnumType.STRING)
        <%_ }
        if (fieldType === 'byte[]') { _%>
    @Lob
        <%_ if (databaseTypePostgres && field.blobContentTypeText) { _%>
        @Type(type = "org.hibernate.type.TextType")
        <%_ }
        }
        if (['Instant', 'ZonedDateTime', 'LocalDate', 'Duration'].includes(fieldType)) { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (field.fieldTypeBigDecimal) { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", precision = 21, scale = 2<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (field.fieldTypeUUID && (databaseTypeMysql || databaseTypeMariadb)) { _%>
    @Type(type = "uuid-char")
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", length = 36<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (fieldValidate) { %><% if (fieldValidateRules.includes('maxlength')) { %>, length = <%= fieldValidateRulesMaxlength %><% } %><% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %><% } %>)
        <%_ }
    } _%>
    <%_ if (databaseTypeMongodb || databaseTypeCouchbase) { _%>
    @Field("<%=fieldNameUnderscored %>")
    <%_ } _%>
    <%_ if (databaseTypeNeo4j) { _%>
    @Property("<%=fieldNameUnderscored %>")
    <%_ } _%>
    <%_ if (fieldTypeBlobContent !== 'text') { _%>
    var <%= fieldName %>: <% if(fieldType === 'byte[]') { _%>ByteArray<%_ } else if(fieldType==='Integer'){ _%>Int<%_ } else { _%><%= fieldType %><% } %>? = null<%_ if (field.fieldTypeBinary) { _%>,<%_ } else { _%>,<%_ } %>
    <%_ } else { _%>
    var <%= fieldName %>: String? = null,
    <%_ } _%>

    <%_ if (field.fieldWithContentType) { _%>
        <%_ if ((databaseTypeSql && !reactive) || databaseTypeCassandra) { _%>
    @Column(<% if (!databaseTypeCassandra) { %>name = <% } %>"<%-fieldNameAsDatabaseColumn %>_content_type"<% if (required && !databaseTypeCassandra) { %>, nullable = false<% } %>)
        <%_ if (required && databaseTypeCassandra) { _%>
    @field:NotNull
        <%_ } _%>
      <%_ } _%>
    <%_ if (databaseTypeSql && reactive) { _%>
    @Column("<%- fieldNameAsDatabaseColumn %>_content_type")
    <%_ if (required) { _%>
    @NotNull
    <%_ } _%>
    <%_ } _%>
      <%_ if (databaseTypeMongodb || databaseTypeCouchbase) { _%>
    @Field("<%=fieldNameUnderscored %>_content_type")
      <%_ } _%>
      <%_ if (databaseTypeNeo4j) { _%>
    @Property("<%=fieldNameUnderscored %>_content_type")
      <%_ } _%>
    var <%= fieldName %>ContentType: String? = null,

    <%_ } _%>
    <%_ }
    relationships.forEach((relationship, idx) => {
        const otherEntityRelationshipName = databaseTypeNeo4j
            ? "HAS_" + _.toUpper(_.snakeCase(relationship.otherEntityRelationshipName))
            : relationship.otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationship.otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationship.otherEntityIsEmbedded;
        const relationshipName = databaseTypeNeo4j
            ? "HAS_" + _.toUpper(_.snakeCase(relationship.relationshipName))
            : relationship.relationshipName;
        const relationshipFieldName = relationship.relationshipFieldName;
        const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
        const relationshipType = relationship.relationshipType;
        const relationshipValidate = relationship.relationshipValidate;
        const relationshipRequired = relationship.relationshipRequired;
        const otherEntityNameCapitalized = relationship.otherEntityNameCapitalized;
        const ownerSide = relationship.ownerSide || false;
        const isUsingMapsId = relationship.id;
        const comma = parseInt(idx,10) === relationshipLength ?  '' : ',';
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }

        // An embedded entity should not reference entities that embeds it, unless the other entity is also embedded
        if (embedded && !otherEntityIsEmbedded && ownerSide === false) {
          return;
        }

        if (typeof relationship.javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationship.javadoc) %>
            <%_ if (!hasDto) { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(relationship.javadoc) %>")
            <%_ }_%>
    <%_ }
        if (relationshipType === 'one-to-many') {
            if (databaseTypeSql && !reactive) {
    _%>
    @OneToMany(mappedBy = "<%= otherEntityRelationshipName %>")
            <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
            <%_ }
        } else if (databaseTypeMongodb || databaseTypeCouchbase) {
            if (databaseTypeMongodb && !otherEntityIsEmbedded) { _%>
    @DBRef
        <%_ } _%>
    @Field("<%= relationshipFieldName %>")
        <%_ if (databaseTypeCouchbase && !otherEntityIsEmbedded) { _%>
    var <%= relationshipFieldName %>Ids: HashSet<String> = hashSetOf(),

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
        <%_ } _%>
        <%_ } else if (databaseTypeNeo4j) { _%>
    @Relationship("<%= relationshipName %>")
        <%_ } else if (databaseTypeSql && reactive) { _%>
    @Transient
        <%_ } _%>
        <%_ if (relationship.ignoreOtherSideProperty) { _%>

    @JsonIgnoreProperties(value = [
        <%_ const rels = relationship.otherEntity.relationships.map(otherRelationship => `"${otherRelationship.relationshipReferenceField}"`).join(',') _%>
        <%- rels %>
    ], allowSetters = true)
        <%_ } _%>
    var <%= relationshipFieldNamePlural %>: MutableSet<<%= asEntity(otherEntityNameCapitalized) %>>? = mutableSetOf(),

    <%_ } else if (relationship.relationshipManyToOne) {
            if (databaseTypeSql && !reactive) {
    _%>
    @ManyToOne<%_ if (relationshipRequired) { _%>(optional = false)<%_ } _%>
        <%_ if (relationshipValidate) { _%>
    <%- include('relationship_validators', { relationship }); -%>
        <%_ }
    } else if ((databaseTypeMongodb || databaseTypeCouchbase) && !otherEntityIsEmbedded) {
        if (databaseTypeMongodb) { _%>
    @DBRef
    <%_ } _%>
    @Field("<%= relationshipFieldName %>")
    <%_ if (databaseTypeCouchbase) { _%>
    var <%= relationshipFieldName %>Id: String? = null,

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ }
    } else if (databaseTypeNeo4j) {
        if (relationship.ignoreOtherSideProperty) { _%>
            @Relationship(value = "<%= otherEntityRelationshipName %>", direction = Relationship.Direction.INCOMING)
        <%_ } else { _%>
    @Relationship("<%= relationshipName %>")
        <%_ }
        } _%>
    <%_ if (relationship.ignoreOtherSideProperty) { _%>

    @JsonIgnoreProperties(value = [
        <%_ const rels = relationship.otherEntity.relationships.map(otherRelationship => `"${otherRelationship.relationshipReferenceField}"`).join(',') _%>
        <%- rels %>
    ], allowSetters = true)
    <%_ } _%>
    <%_ if (databaseTypeSql && reactive) { _%>
    @Transient
    <%_ } _%>
    var <%= relationshipFieldName %>: <%= asEntity(otherEntityNameCapitalized) %>? = null,

    <%_ if (databaseTypeSql && reactive) { _%>
    @Column("<%= getColumnName(relationshipName) %>_id")
    var <%= relationshipFieldName %>Id: <%= relationship.otherEntity.primaryKey.type %>? = null,
    <%_ } _%>

    <%_ } else if (relationship.relationshipManyToMany) {
        if (databaseTypeSql && !reactive) { _%>
    @ManyToMany<% if (ownerSide === false) { %>(mappedBy = "<%= otherEntityRelationshipNamePlural %>")<% } %>
        <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
        <%_ } if (ownerSide) {
            if (relationshipValidate) { _%>
    <%- include('relationship_validators', { relationship }); -%>
            <%_ } _%>
    @JoinTable(name = "<%= relationship.joinTable.name %>",
        joinColumns = [
            <%_ entity.primaryKey.fields.forEach((field, idx) => { _%>
            JoinColumn(name = "<%= `${entityTableName}_${field.columnName}` %>") <%= idx === 0 ? '' : ',' %>
            <%_ }) _%>
        ],
        inverseJoinColumns = [
            <%_ relationship.otherEntity.primaryKey.fields.forEach((field, idx) => { _%>
            JoinColumn(name =  "<%= `${relationship.columnName}_${field.columnName}` %>")<%= idx === 0 ? '' : ',' %>
            <%_ }) _%>
        ]
    )   <%_  }
             } else if ((databaseTypeMongodb || databaseTypeCouchbase) && !otherEntityIsEmbedded) {
            if (databaseTypeMongodb) { _%>
    @DBRef
            <%_ } _%>
    @Field("<%= relationshipFieldNamePlural %>")
        <%_ if (databaseTypeCouchbase) { _%>
    var <%= relationshipFieldName %>Ids: HashSet<String> = hashSetOf(),

    @N1qlJoin(on = "lks.<%= relationshipFieldNamePlural %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
        <%_ }
        } else if (databaseTypeNeo4j) { _%>
    @Relationship(<%_
        if (ownerSide) { _%>"<%= relationshipName %>"<%_
        } else { _%>value = "<%= otherEntityRelationshipName %>", direction = Relationship.Direction.INCOMING<%_ } _%>)<%_
    }
        if (relationship.ignoreOtherSideProperty) { _%>

    @JsonIgnoreProperties(value = [
        <%_ const rels = relationship.otherEntity.relationships.map(otherRelationship => `"${otherRelationship.relationshipReferenceField}"`).join(',') _%>
        <%- rels %>
    ], allowSetters = true)
    <%_ } _%>
    <%_ if (databaseTypeSql && reactive) { _%>
    @Transient
    <%_ } _%>
    var <%= relationshipFieldNamePlural %>: MutableSet<<%= asEntity(otherEntityNameCapitalized) %>>? = mutableSetOf(),

    <%_ } else {
        if (databaseTypeSql && !reactive) {
            if (relationship.ignoreOtherSideProperty) { _%>

    @JsonIgnoreProperties(value = [
        <%_ const rels = relationship.otherEntity.relationships.map(otherRelationship => `"${otherRelationship.relationshipReferenceField}"`).join(',') _%>
        <%- rels %>
    ], allowSetters = true)
        <%_ }
            if (ownerSide) { _%>
    @OneToOne<%_ if (relationshipRequired) { _%>(optional = false)<%_ } _%>
            <%_ if (relationshipValidate) { _%>
    <%- include('relationship_validators', { relationship }); -%>
            <%_ }_%>
            <%_ if (isUsingMapsId) { %>
    @MapsId
    @JoinColumn(name = "<%= relationship.otherEntity.primaryKey.fields[0].columnName %>")
            <%_ } else { _%>
    @JoinColumn(unique = true)
            <%_ } _%>
        <%_ } else { _%>
    @OneToOne(mappedBy = "<%= otherEntityRelationshipName %>")
        <%_ }
        } else if ((databaseTypeMongodb || databaseTypeCouchbase) && !otherEntityIsEmbedded) {
            if (databaseTypeMongodb) { _%>
    @DBRef
        <%_ } _%>
    @Field("<%= relationshipFieldName %>")
     <%_ if (databaseTypeCouchbase) { _%>
    var <%= relationshipFieldName %>Id: String? = null,

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ }
    } else if (databaseTypeSql && reactive) { _%>
        <%_ if (ownerSide&& isUsingMapsId !== true) { _%>
    var <%= relationshipFieldName %>Id: <%= relationship.otherEntity.primaryKey.type %>? = null,
        <%_ } _%>
    @Transient
    <%_ } _%>
    var <%= relationshipFieldName %>: <%= asEntity(otherEntityNameCapitalized) %>? = null,

    <%_ }
}); _%>
    // jhipster-needle-entity-add-field - JHipster will add fields here
) : Serializable {

<%_ if(databaseTypeSql && reactive && hasRelationship) { _%>

    @PersistenceConstructor
    constructor (
    <%_ if (!embedded) { _%>
        <%= primaryKey.name %>: <%= primaryKey.type %>?,
    <%_ } _%>
    <%_
        const filteredFields = fields.filter(field => !field.id && !field.transient);
        for (const field of filteredFields) {
            let required = false;
            let unique = false;
            const fieldType = field.fieldType;
            const fieldTypeBlobContent = field.fieldTypeBlobContent;
            const fieldName = field.fieldName;

            if (fieldTypeBlobContent !== 'text') {
    _%>
        <%= fieldName %>: <% if(fieldType === 'byte[]') { _%>ByteArray<%_ } else if(fieldType==='Integer'){ _%>Int<%_ } else { _%><%= fieldType %><% } %>?,
    <%_ } else { _%>
        <%= fieldName %>: String?,
    <%_ } _%>

    <%_ if (field.fieldWithContentType) { _%>
        <%= fieldName %>ContentType: String?,
    <%_ }  } _%>
    ): this(
        <%_ if (!embedded) { _%>
            <%= primaryKey.name %>,
        <%_ } _%>
        <%_
            const filteredFieldsInConstructor = fields.filter(field => !field.id && !field.transient);
            for (const field of filteredFieldsInConstructor) {
                const fieldName = field.fieldName;
        _%>
            <%= fieldName %>,
                <%_ if (field.fieldWithContentType) { _%>
            <%= fieldName %>ContentType,
                <%_ } _%>
        <%_ } _%>
        <%_
            relationships.forEach((relationship, idx) => {
                const relationshipType = relationship.relationshipType;

                // An embedded entity should not reference entities that embeds it, unless the other entity is also embedded
                if (embedded && !otherEntityIsEmbedded && ownerSide === false) {
                    return;
                }

                if (relationshipType === 'one-to-many') {
        _%>
            null,

            <%_ } else if (relationship.relationshipManyToOne) { _%>
            null,
            null,

            <%_ } else if (relationship.relationshipManyToMany) { _%>
            null,

            <%_ } else { _%>
            null,
            <%_ } }); _%>
        )
<%_ } _%>

<%_ if (databaseTypeCouchbase && !embedded) { _%>

    @Suppress("unused")
    @IdPrefix
    private val prefix: String = PREFIX
<%_ } _%>
<%_
    for (relationship of relationships) {
        const relationshipFieldName = relationship.relationshipFieldName;
        const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
        const relationshipType = relationship.relationshipType;
        const otherEntityNameCapitalized = relationship.otherEntityNameCapitalized;
        const relationshipNameCapitalized = relationship.relationshipNameCapitalized;
        const relationshipNameCapitalizedPlural = relationship.relationshipNameCapitalizedPlural;
        const otherEntityName = relationship.otherEntityName;
        const otherEntityNamePlural = relationship.otherEntityNamePlural;
        const otherEntityRelationshipNameCapitalized = relationship.otherEntityRelationshipNameCapitalized;
        const otherEntityRelationshipNameCapitalizedPlural = relationship.otherEntityRelationshipNameCapitalizedPlural;
        const otherEntityRelationshipNamePlural = relationship.otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationship.otherEntityIsEmbedded;
        const otherEntityRelationshipName = relationship.otherEntityRelationshipName;
        const ownerSide = relationship.ownerSide || false;

        // An embedded entity should not reference entities that embeds it, unless the other entity is also embedded
        if (embedded && !otherEntityIsEmbedded && ownerSide === false) {
            continue;
        }

        const id = relationship.id;
        const reactiveRelationshipWithId = (databaseTypeSql && reactive && !(relationship.relationshipOneToOne &&
                (ownerSide === false || (ownerSide&& id))));
    _%>
    <%_ if (relationshipType === 'one-to-many' || relationship.relationshipManyToMany) { _%>
        <%_ if (fluentMethods) { _%>

    fun add<%= relationshipNameCapitalized %>(<%= otherEntityName %>: <%= asEntity(otherEntityNameCapitalized) %>): <%= persistClass %> {
        if (this.<%= relationshipFieldNamePlural %> == null) {
            this.<%= relationshipFieldNamePlural %> = mutableSetOf()
        }
        this.<%= relationshipFieldNamePlural %>?.add(<%= otherEntityName %>)
        <%_ if (!otherEntityIsEmbedded || embedded && ownerSide) { _%>
            <%_ if (databaseTypeCouchbase && !otherEntityIsEmbedded) { _%>
        <%= otherEntityName %>.<%= primaryKey.name %>?.let { this.<%= relationshipFieldName %>Ids.add(it) }
            <%_ } _%>
            <%_ if (relationship.otherRelationship) {
                    if (relationshipType === 'one-to-many') {
                        if (databaseType !== 'neo4j') { _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipName %> = this
                <%_ } _%>
            <%_ } else if (otherEntityRelationshipNameCapitalizedPlural && asEntity(otherEntityNameCapitalized)!=='User' && relationship.relationshipManyToMany) {
                // JHipster version < 3.6.0 didn't ask for this relationship name _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipNamePlural %>?.add(this)
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
        return this
    }

    fun remove<%= relationshipNameCapitalized %>(<%= otherEntityName %>: <%= asEntity(otherEntityNameCapitalized) %>): <%= persistClass %> {
        this.<%= relationshipFieldNamePlural %>?.remove(<%= otherEntityName %>)
        <%_ if (!otherEntityIsEmbedded || (embedded && ownerSide)) { _%>
            <%_ if (databaseTypeCouchbase && !otherEntityIsEmbedded) { _%>
        <%= otherEntityName %>.<%= primaryKey.name %>?.let { this.<%= relationshipFieldName %>Ids.remove(it) }
            <%_ } _%>
            <%_ if (relationship.otherRelationship) {
                    if (relationshipType === 'one-to-many') {
                        if (databaseType !== 'neo4j') { _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipName %> = null
                <%_ } _%>
            <%_ } else if (otherEntityRelationshipNamePlural !== '' && ownerSide === false &&
                 otherEntityNameCapitalized !== 'User' && relationship.relationshipManyToMany) {
                // JHipster version < 3.6.0 didn't ask for this relationship name _%>
        <%= otherEntityName %>.<%= otherEntityRelationshipNamePlural %>?.remove(this)
                <%_ } _%>
            <%_ } _%>
        <%_ } _%>
        return this
    }
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is <%= persistClass %>) return false

        <%_ if (!embedded) { _%>
        return <%= primaryKey.name %> != null && other.<%= primaryKey.name %> != null && <%= primaryKey.name %> == other.<%= primaryKey.name %>
        <%_ } else { _%>
        return false;
        <%_ } _%>
    }

    override fun hashCode() = 31

    override fun toString() = "<%= persistClass %>{" +
        <%_ if (!embedded) { _%>
            "<%= primaryKey.name %>=$<%= primaryKey.name %>" +
        <%_ } _%>
            <%_ for (field of fields.filter(field => !field.id && !field.transient)) {
                const fieldType = field.fieldType;
                const fieldTypeBlobContent = field.fieldTypeBlobContent;
                const fieldName = field.fieldName;
                const fieldInJavaBeanMethod = field.fieldInJavaBeanMethod;
                const isNumeric = ['integer', 'long', 'float', 'double', 'bigdecimal'].includes(fieldType.toLowerCase()); _%>
            ", <%= fieldName %>=<% if (! isNumeric) { %>'<% } %>$<%= fieldName %><% if (! isNumeric) { %>'<% } %>" +
                <%_ if (field.fieldWithContentType) { _%>
            ", <%= fieldName %>ContentType='$<%= fieldName %>ContentType'" +
                <%_ } _%>
            <%_ } _%>
            <%_ for (relationship of relationships) {
                const relationshipType = relationship.relationshipType;
                const otherEntityIsEmbedded = relationship.otherEntityIsEmbedded;
                const relationshipFieldName = relationship.relationshipFieldName;
                const relationshipNameCapitalized = relationship.relationshipNameCapitalized;
                const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
                const relationshipNameCapitalizedPlural = relationship.relationshipNameCapitalizedPlural;
                const ownerSide = relationship.ownerSide; _%>
            <%_ if (otherEntityIsEmbedded) {
                    if (relationship.relationshipManyToOne) { _%>
            ", <%= relationshipFieldNamePlural %>='$<%= relationshipFieldNamePlural %>'" +
            <%_ } else if (relationship.relationshipOneToOne && ownerSide) { _%>
            ", <%= relationshipFieldName %>='$<%= relationshipFieldName %>'" +
            <%_ } } } _%>
            "}"

    companion object {
        private const val serialVersionUID = 1L
        <%_ if (databaseTypeCouchbase && !embedded) { _%>
        const val PREFIX = "<%= entityInstance.toLowerCase() %>"
        <%_ } _%>
    }
}
