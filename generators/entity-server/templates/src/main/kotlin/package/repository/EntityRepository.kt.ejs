<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

import <%= packageName %>.domain.<%= persistClass %>
<%_ if (relationshipsContainEagerLoad) { _%>
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
<%_ } _%>
<%_ if (databaseTypeSql) { _%>
import org.springframework.data.jpa.repository.JpaRepository
    <%_ if (jpaMetamodelFiltering) { _%>
import org.springframework.data.jpa.repository.JpaSpecificationExecutor
    <%_ } _%>
import org.springframework.data.jpa.repository.Query
    <%_ if (relationshipsContainEagerLoad) { _%>
import org.springframework.data.repository.query.Param
    <%_ } _%>
<%_ } _%>
<%_ if (databaseTypeMongodb) { _%>
import org.springframework.data.mongodb.repository.Query
import org.springframework.data.mongodb.repository.MongoRepository
<%_ } _%>
<%_ if (databaseTypeNeo4j) { _%>
import org.springframework.data.neo4j.repository.Neo4jRepository
<%_ } _%>
<%_ if (searchEngineCouchbase) { _%>
import <%= packageName %>.repository.search.SearchCouchbaseRepository
<%_ } _%>
<%_ if (databaseTypeCouchbase && relationshipsContainEagerLoad) { _%>
import org.springframework.data.couchbase.core.query.Query
<%_ } _%>
<%_ if (databaseTypeCassandra) { _%>
import org.springframework.data.cassandra.repository.CassandraRepository
<%_ } _%>
import org.springframework.stereotype.Repository
<%_
if (databaseTypeSql || databaseTypeMongodb || databaseTypeCouchbase) {
    let importList = fieldsContainOwnerManyToMany;
    for (r of relationships) {
        if (r.relationshipManyToOne && r.otherEntityUser) {
            importList = true;
        }
    }
_%>
    <%_ if (relationshipsContainEagerLoad) { _%>
import java.util.Optional
    <%_ } _%>
<%_ } _%>
<%_ if (primaryKey.typeUUID) { _%>

import java.util.UUID
<%_ } _%>

/**
 * Spring Data <%= officialDatabaseType %> repository for the [<%= persistClass %>] entity.
 */
<%_ if (!relationshipsContainEagerLoad) { _%>
@Suppress("unused")
<%_ } _%>
@Repository
interface <%=entityClass%>Repository : <% if (databaseTypeSql) { %>JpaRepository<% } %><% if (databaseTypeMongodb) { %>MongoRepository<% } %><% if (databaseTypeNeo4j) { %>Neo4jRepository<% } %><% if (databaseTypeCassandra) { %>CassandraRepository<% } %><% if (databaseTypeCouchbase) { %>N1qlCouchbaseRepository<% } %><<%=persistClass%>, <%= primaryKey.type %>><% if (jpaMetamodelFiltering) { %>, JpaSpecificationExecutor<<%= persistClass %>><% } %><% if (searchEngineCouchbase) { %>, SearchCouchbaseRepository<<%= persistClass %>, <%= primaryKey.type %>><% } %> {
    <%_ for (const relationship of relationships) {
        if (relationship.relationshipManyToOne && relationship.otherEntityName === 'user' && databaseTypeSql) { _%>

    @Query("select <%= entityInstanceDbSafe %> from <%= persistClass %> <%= entityInstanceDbSafe %> where <%= entityInstanceDbSafe %>.<%= relationship.relationshipFieldName %>.login = ?#{principal.<% if (authenticationTypeOauth2) { %>preferredUsername<% } else { %>username<% } %>}")
    fun findBy<%= relationship.relationshipNameCapitalized %>IsCurrentUser(): MutableList<<%= persistClass %>>
    <%_ } } _%>
    <%_ if (relationshipsContainEagerLoad) {
        if (databaseTypeSql) { _%>

    @Query(value = "select distinct <%= entityInstanceDbSafe %> from <%= persistClass %> <%= entityInstanceDbSafe %><% for (const relationship of relationships) {
    if (relationship.relationshipEagerLoad) { %> left join fetch <%= entityInstanceDbSafe %>.<%= relationship.reference.name %><% } } %>",
        countQuery = "select count(distinct <%= entityInstanceDbSafe %>) from <%= persistClass %> <%= entityInstanceDbSafe %>")
    fun findAllWithEagerRelationships(pageable: Pageable): Page<<%= persistClass %>>

    @Query("select distinct <%= entityInstanceDbSafe %> from <%= persistClass %> <%= entityInstanceDbSafe %><% for (const relationship of relationships) {
    if (relationship.relationshipEagerLoad) { %> left join fetch <%= entityInstanceDbSafe %>.<%= relationship.reference.name %><% } } %>")
    fun findAllWithEagerRelationships(): MutableList<<%= persistClass %>>

    @Query("select <%= entityInstanceDbSafe %> from <%= persistClass %> <%= entityInstanceDbSafe %><% for (const relationship of relationships) {
    if (relationship.relationshipEagerLoad) { %> left join fetch <%= entityInstanceDbSafe %>.<%= relationship.reference.name %><% } } %> where <%= entityInstanceDbSafe %>.id =:id")
    fun findOneWithEagerRelationships(@Param("id") id: <%= primaryKey.type %>): Optional<<%= persistClass %>>
    <%_
        } else if (databaseTypeMongodb || databaseTypeCouchbase)  { _%>

    @Query("<%= (databaseTypeMongodb)?'{}':'#{#n1ql.selectEntity} WHERE #{#n1ql.filter}'%>")
    fun findAllWithEagerRelationships(pageable: Pageable): Page<<%= persistClass %>>

    @Query("<%= (databaseTypeMongodb)?'{}':'#{#n1ql.selectEntity} WHERE #{#n1ql.filter}'%>")
    fun findAllWithEagerRelationships(): MutableList<<%= persistClass %>>

    @Query("<%- (databaseTypeMongodb)?"{'id': ?0}":"#{#n1ql.selectEntity} USE KEYS $1 WHERE #{#n1ql.filter}"%>")
    fun findOneWithEagerRelationships(id: <%= primaryKey.type %>): Optional<<%= persistClass %>>
    <%_ }
    } _%>
}
